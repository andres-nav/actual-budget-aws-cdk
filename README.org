#+title: Actual Budget deployment for AWS using AWS CDK

This is a simple deployment of the [[https://actualbudget.org/][ActualBudget]] application using [[https://aws.amazon.com/cdk/][AWS CDK]]. ActualBudget is a straightforward app for tracking income and expenses.

** Overview
The deployment includes:

#+BEGIN_HTML
<p align="center">
  <img src="./resources/actual_budget_cdk_architecture.svg"/>
</p>
#+END_HTML

- AutoScalingGroup with LaunchTemplate: Deploys one instance for the application, configured to auto-replace in case of issues.
- Default VPC with Public Subnet: Configured with a security group allowing traffic on ports 80, 443 (internet), and 22 (AWS Instance Connect).
- Env S3 Bucket: Stores the =docker_compose.yml= for application deployment.
- Backup S3 Bucket: Holds backups, stored for 30 days, with snapshots every 3 days.

Key Features:

- Automatic SSL certificate generation with [[https://github.com/Valian/docker-nginx-auto-ssl][valian/docker-nginx-auto-ssl]]
- Scheduled automatic backups to an S3 bucket
- Automatic instance recovery on failure (requires DNS record update for a new instance)

** Deployment
In order to deploy the application, you need to have the following prerequisites: =npm=, =aws-cli=, =python=, and =git=. You also need to have an AWS account and have the AWS CLI configured with the necessary permissions.

1. Clone the repository:
   #+BEGIN_SRC shell
   git clone https://github.com/andres-nav/actual-budget-aws-cdk.git
   #+END_SRC

2. Install the dependencies assuming you are using a *nix system:
   #+BEGIN_SRC shell
   make install
   #+END_SRC

3. Create =.env= file with the following content:
   #+BEGIN_SRC shell
   ACCOUNT_ID=<YOUR_ACCOUNT_ID>
   AWS_PROFILE=<SSO_PROFILE>
   REGION=<AWS_REGION>
   DOMAIN_NAME=<DOMAIN_NAME>
   #+END_SRC

5. Bootstrap the CDK:
   #+BEGIN_SRC shell
   make bootstrap
   #+END_SRC

6. Deploy the application:
   #+BEGIN_SRC shell
   make deploy
   #+END_SRC

7. In your DNS provider, create a A record pointing to the public IP of the instance.

** Considerations
This setup is intended for testing purposes and isnâ€™t production-ready. Key considerations:

- For production, consider using a public subnet for nginx and a private subnet for the ActualBudget instance for enhanced security.
- Adjust backup frequency and retention based on your needs.
- In case of instance replacement, remember to update the DNS record. SSL generation for the new instance may be delayed due to Let's Encrypt rate limits.
- Using Route 53 is recommended for automatic DNS updates upon failure.
